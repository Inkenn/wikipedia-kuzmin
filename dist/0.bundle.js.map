{"version":3,"sources":["webpack:///./src/wikiapp.js","webpack:///./src/serviceWorker.js","webpack:///./src/index.js"],"names":["WikiApp","props","state","rp","pt","renderdone","pageurls","this","fetch","response","json","trashpages","pages","query","random","pagestitles","i","length","title","setState","createRandomPages","list","map","pindex","href","className","key","type","onClick","handleRefresh","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNA+EeA,E,kDA7EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,GAAI,EACJC,GAAI,GACJC,YAAY,GALD,E,iMASXC,EAAW,4FAA8FC,KAAKL,MAAMC,G,SACnGK,MAAMF,G,cAAvBG,E,gBACmBA,EAASC,O,OAGhC,IAHIC,E,OACAC,EAAQD,EAAWE,MAAMC,OACzBC,EAAc,GACVC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAE7BD,EAAYC,GAAKJ,EAAMI,GAAGE,MAE9BX,KAAKY,SACD,CACIf,GAAIW,EACJV,YAAY,I,6IAYpBE,KAAKY,SAAU,CACXf,GAFa,GAGbC,YAAY,EACZF,GAAI,M,+BAGF,IAAD,OACDI,KAAKL,MAAMG,YAAYE,KAAKa,oBAChC,IACMC,EADQd,KAAKL,MAAME,GACNkB,KAAI,SAACJ,EAAOK,GAE3B,IAAIC,EAAO,8BAAgCN,EAC3C,OACA,yBAAKO,UAAU,MAAMC,IAAKH,GACtB,yBAAKE,UAAU,aACX,4BACCP,GAED,2BACE,uBAAGO,UAAU,MAAMD,KAAMA,GAAzB,4EAMd,OACR,yBAAKC,UAAU,mBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,aACd,wBAAIA,UAAU,eAAd,yKAGUJ,EACV,yBAAKI,UAAU,OACd,yBAAKA,UAAU,aACC,4BAAQE,KAAK,SAASF,UAAU,oBAAoBG,QAAS,kBAAM,EAAKC,kBAAxE,+G,GArEEC,IAAMC,WCWRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"0.bundle.js","sourcesContent":["import React from 'react';\r\nclass WikiApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rp: 5,\r\n            pt: [],\r\n            renderdone: false,\r\n        };\r\n    };\r\n    async createRandomPages() {\r\n        var pageurls = 'https://en.wikipedia.org/w/api.php?origin=*&action=query&format=json&list=random&rnlimit=' + this.state.rp;\r\n        var response = await fetch(pageurls);\r\n        var trashpages = await response.json();\r\n        var pages = trashpages.query.random;\r\n        var pagestitles = [];\r\n        for(let i = 0; i < pages.length; i++)\r\n        {\r\n            pagestitles[i] = pages[i].title;\r\n        }\r\n        this.setState(\r\n            {\r\n                pt: pagestitles,\r\n                renderdone: true}\r\n        );\r\n    }\r\n//    handleRefresh(newrp)\r\n//    {\r\n//        this.setState ({\r\n//            rp: newrp,\r\n//        });\r\n//    }\r\n    handleRefresh()\r\n    {\r\n        let emptypages = [];\r\n        this.setState( {\r\n            pt: emptypages,\r\n            renderdone: false,\r\n            rp: 5,\r\n        });\r\n    }\r\n    render() {\r\n        if(!this.state.renderdone) this.createRandomPages();\r\n        const pages = this.state.pt;\r\n        const list = pages.map((title, pindex) => \r\n        {\r\n            let href = 'https://wikipedia.org/wiki/' + title;\r\n            return(\r\n            <div className=\"row\" key={pindex}>\r\n                <div className=\"col-md-12\">\r\n                    <h3>\r\n                    {title}\r\n                    </h3>\r\n                    <p>\r\n                      <a className=\"btn\" href={href}>На страницу »</a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            );\r\n        });\r\n        return(\r\n<div className=\"container-fluid\">\r\n\t<div className=\"row\">\r\n\t\t<div className=\"col-md-12\">\r\n\t\t\t<h2 className=\"text-center\">\r\n\t\t\t\tГенерируем случайные страницы!\r\n\t\t\t</h2>\r\n            {list}\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-12\">\r\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={() => this.handleRefresh()}>Сгенерировать ещё!</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n        );\r\n    }\r\n}\r\nexport default WikiApp; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WikiApp from './wikiapp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WikiApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}